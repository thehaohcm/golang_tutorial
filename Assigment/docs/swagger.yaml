basePath: /
definitions:
  main.friendConnection:
    properties:
      count:
        type: integer
      friends:
        items:
          type: string
        type: array
      success:
        type: boolean
    type: object
  main.friendRequest:
    properties:
      friends:
        items:
          type: string
        type: array
    type: object
  main.recipientRequest:
    properties:
      sender:
        type: string
      text:
        type: string
    type: object
  main.recipientResponse:
    properties:
      recipients:
        items:
          type: string
        type: array
      success:
        type: boolean
    type: object
  main.response:
    properties:
      success:
        type: boolean
    type: object
  main.subscribeRequest:
    properties:
      requestor:
        type: string
      target:
        type: string
    type: object
  main.user:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: hao.nguyen@s3corp.com.vn
    name: Hao Nguyen
    url: http://musicmaven.s3corp.vn
  description: This is a sample of Golang API endpoints assignment
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Golang API endpoints assignment
  version: "1.0"
paths:
  /addFriend:
    post:
      consumes:
      - application/json
      description: return a result of creating a new friend by 2 user emails
      parameters:
      - description: friend
        in: body
        name: friend
        required: true
        schema:
          $ref: '#/definitions/main.friendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.response'
      summary: add a new friend
      tags:
      - Friend
  /blockSubscribe:
    post:
      consumes:
      - application/json
      description: return a result of blocking subscribe user
      parameters:
      - description: Subscribe
        in: body
        name: subscribe
        required: true
        schema:
          $ref: '#/definitions/main.subscribeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.response'
      summary: block Subscribe user
      tags:
      - Subscribe
  /commonFriend:
    post:
      consumes:
      - application/json
      description: return a list of friend by list of user emails
      parameters:
      - description: User email list
        in: body
        name: emails
        required: true
        schema:
          $ref: '#/definitions/main.friendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.friendConnection'
      summary: show common Friends
      tags:
      - Friend
  /listFriend:
    get:
      consumes:
      - application/json
      description: return a list of friend by one user email
      parameters:
      - description: email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.friendConnection'
      summary: show list of Friend
      tags:
      - Friend
  /listRecipients:
    post:
      consumes:
      - application/json
      description: get list by email user
      parameters:
      - description: Recipient
        in: body
        name: recipients
        required: true
        schema:
          $ref: '#/definitions/main.recipientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.recipientResponse'
      summary: Show List of Recipients
      tags:
      - Subscribe
  /showAllUsers:
    get:
      consumes:
      - application/json
      description: return a list of entire users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.user'
            type: array
      summary: show all infos of all users
      tags:
      - User
  /subscribe:
    post:
      consumes:
      - application/json
      description: return a result of subscribing user
      parameters:
      - description: Subscribe
        in: body
        name: subscribe
        required: true
        schema:
          $ref: '#/definitions/main.subscribeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.response'
      summary: subscribe user
      tags:
      - Subscribe
swagger: "2.0"
